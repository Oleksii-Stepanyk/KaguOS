2048
START_PARTITION_TABLE
PARTITION_ENTRIES 4
NAME part1 START_BLOCK 10 END_BLOCK 1000
NAME part2 START_BLOCK 1001 END_BLOCK 1500
NAME part3 START_BLOCK 1501 END_BLOCK 1800
NAME part4 START_BLOCK 1801 END_BLOCK 2048
END_PARTITION_TABLE

FS_HEADER kagu_fs FIRST_USABLE_BLOCK 31 LAST_USABLE_BLOCK 1000
config.txt 4 4 0 user user BLOCKS 31 40
cat 7 7 7 user user BLOCKS 41 100
1.txt 4 4 4 user user BLOCKS 101 110
mario 7 7 7 user user BLOCKS 111 261
clear 7 7 7 user user BLOCKS 262 275
debug 7 7 7 user user BLOCKS 276 320
sleep 7 7 7 user user BLOCKS 321 335
user_sched 7 7 7 user group BLOCKS 336 395
minion 7 7 7 user user BLOCKS 396 547
producer 7 7 7 user user BLOCKS 548 627
hello 7 7 7 user user BLOCKS 628 711
interpreter 7 7 7 user user BLOCKS 712 774
EMPTY_SPACE 7 7 7 user user BLOCKS 775 783
tail 7 7 7 user user BLOCKS 784 895
head 7 7 7 user user BLOCKS 896 999




FS_HEADER_END
proc_memory 500     // memory allocated for one process
max_proc_count 20   // max count of active processes
max_fd_count 50     // max count of files open at the same time
schedule_quantum 100 // instruction count before rescheduling






1 4 70         #  copy REG_A => var:input_file
1 58 6         #  write "" => REG_B
1 59 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 54           #  jump_if lbl:exit_error
1 70 4         #  copy var:input_file => REG_A
1 60 10        #  write SYS_CALL_OPEN => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 54           #  jump_err lbl:exit_error
1 12 71        #  copy REG_RES => var:fd
1 62 72        #  write "1" => var:counter
1 71 4         #  copy var:fd => REG_A
1 72 6         #  copy var:counter => REG_B
1 63 10        #  write SYS_CALL_READ => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 45           #  jump_err lbl:close
1 12 4         #  copy REG_RES => REG_A
1 64 6         #  write COLOR_NO => REG_B
1 65 10        #  write SYS_CALL_PRINTLN => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 72 4         #  copy var:counter => REG_A
1 66 2         #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 72        #  copy REG_RES => var:counter
3 29           #  jump lbl:loop
1 71 4         #  copy var:fd => REG_A
1 67 10        #  write SYS_CALL_CLOSE => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 54           #  jump_err lbl:exit_error
1 68 4         #  write "0" => REG_A
1 69 10        #  write SYS_CALL_EXIT => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 62 4         #  write "1" => REG_A
1 69 10        #  write SYS_CALL_EXIT => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec

8
4
25
1
7
0
1
2
6
0
0







clear
mario 5
head -5 mario
cat 1.txt
sleep 5
tail -10 producer
cat config.txt
head -20 head
cat 1.txt
sleep 5
1 4 166        #  copy REG_A => var:iterations
1 126 4        #  write COLOR_CYAN => REG_A
1 127 10       #  write SYS_CALL_SET_BACKGROUND => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 129 170      #  write "cccccccccccccccccccccccccccc" => 170
1 129 171      #  write "cccccccccccccccccccccccccccc" => 171
1 129 172      #  write "cccccccccccccccccccccccccccc" => 172
1 129 173      #  write "cccccccccccccccccccccccccccc" => 173
1 130 174      #  write "cccccccccccrrrrrcccccccccccc" => 174
1 131 175      #  write "ccccccccccrrrrrrrrrccccccccc" => 175
1 132 176      #  write "ccccccccccbbbyybyccccccccccc" => 176
1 133 177      #  write "cccccccccbybyyybyyyccccccccc" => 177
1 134 178      #  write "cccccccccbybbyyybyyycccccccc" => 178
1 135 179      #  write "cccccccccbbyyyybbbbccccccccc" => 179
1 136 180      #  write "cccccccccccyyyyyyycccccccccc" => 180
1 137 181      #  write "ccccccccccbbrbbbcccccccccccc" => 181
1 138 182      #  write "cccccccccbbbrbbrbbbccccccccc" => 182
1 139 183      #  write "ccccccccbbbbrrrrbbbbcccccccc" => 183
1 140 184      #  write "ccccccccyybryrryrbyycccccccc" => 184
1 141 185      #  write "ccccccccyyyrrrrrryyycccccccc" => 185
1 142 186      #  write "ccccccccyyrrrrrrrryycccccccc" => 186
1 143 187      #  write "ccccccccccrrrccrrrcccccccccc" => 187
1 144 188      #  write "cccccccccbbbccccbbbccccccccc" => 188
1 145 189      #  write "ccccccccbbbbccccbbbbcccccccc" => 189
1 146 190      #  write "cBBBBBBBBBBBBBBBBBBBBBBBBBBc" => 190
1 129 191      #  write "cccccccccccccccccccccccccccc" => 191
1 129 192      #  write "cccccccccccccccccccccccccccc" => 192
1 129 193      #  write "cccccccccccccccccccccccccccc" => 193
1 129 194      #  write "cccccccccccccccccccccccccccc" => 194
1 166 4        #  copy var:iterations => REG_A
1 147 2        #  write OP_DECR => REG_OP
0              #  cpu_exec
1 12 166       #  copy REG_RES => var:iterations
1 166 4        #  copy var:iterations => REG_A
1 148 6        #  write "0" => REG_B
1 149 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 118          #  jump_if lbl:exit
1 150 167      #  write "170" => var:counter
1 167 4        #  copy var:counter => REG_A
1 151 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 167       #  copy REG_RES => var:counter
1 167 4        #  copy var:counter => REG_A
1 152 6        #  write "21" => REG_B
1 153 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 167 4        #  copy var:counter => REG_A
1 12 6         #  copy REG_RES => REG_B
1 154 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 155 4        #  write "0.1" => REG_A
1 156 10       #  write SYS_CALL_SLEEP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 167 4        #  copy var:counter => REG_A
1 157 6        #  write "174" => REG_B
1 158 2        #  write OP_CMP_NEQ => REG_OP
0              #  cpu_exec
4 57           #  jump_if lbl:loop_move_up
1 167 4        #  copy var:counter => REG_A
1 147 2        #  write OP_DECR => REG_OP
0              #  cpu_exec
1 12 167       #  copy REG_RES => var:counter
1 167 4        #  copy var:counter => REG_A
1 152 6        #  write "21" => REG_B
1 153 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 167 4        #  copy var:counter => REG_A
1 12 6         #  copy REG_RES => REG_B
1 154 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 155 4        #  write "0.1" => REG_A
1 156 10       #  write SYS_CALL_SLEEP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 150 4        #  write "170" => REG_A
1 167 6        #  copy var:counter => REG_B
1 159 2        #  write OP_CMP_LT => REG_OP
0              #  cpu_exec
4 79           #  jump_if lbl:loop_move_down
1 150 167      #  write "170" => var:counter
1 160 4        #  write "c" => REG_A
1 *167 6       #  copy *var:counter => REG_B
1 161 8        #  write "" => REG_C
1 162 2        #  write OP_CONCAT_WITH => REG_OP
0              #  cpu_exec
1 12 *167      #  copy REG_RES => *var:counter
1 167 4        #  copy var:counter => REG_A
1 151 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 167       #  copy REG_RES => var:counter
1 167 4        #  copy var:counter => REG_A
1 163 6        #  write "191" => REG_B
1 159 2        #  write OP_CMP_LT => REG_OP
0              #  cpu_exec
4 102          #  jump_if lbl:shift_right
3 47           #  jump lbl:start
1 164 4        #  write COLOR_NO => REG_A
1 127 10       #  write SYS_CALL_SET_BACKGROUND => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 148 4        #  write "0" => REG_A
1 165 10       #  write SYS_CALL_EXIT => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
7
9
25
cccccccccccccccccccccccccccc
cccccccccccrrrrrcccccccccccc
ccccccccccrrrrrrrrrccccccccc
ccccccccccbbbyybyccccccccccc
cccccccccbybyyybyyyccccccccc
cccccccccbybbyyybyyycccccccc
cccccccccbbyyyybbbbccccccccc
cccccccccccyyyyyyycccccccccc
ccccccccccbbrbbbcccccccccccc
cccccccccbbbrbbrbbbccccccccc
ccccccccbbbbrrrrbbbbcccccccc
ccccccccyybryrryrbyycccccccc
ccccccccyyyrrrrrryyycccccccc
ccccccccyyrrrrrrrryycccccccc
ccccccccccrrrccrrrcccccccccc
cccccccccbbbccccbbbccccccccc
ccccccccbbbbccccbbbbcccccccc
cBBBBBBBBBBBBBBBBBBBBBBBBBBc
3
0
8
170
2
21
0
10
0.1
11
174
9
10
c

17
191
0
0


1 25 4         #  write COLOR_NO => REG_A
1 26 10        #  write SYS_CALL_SET_BACKGROUND => REG_D
1 27 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 28 4         #  write "0" => REG_A
1 29 10        #  write SYS_CALL_EXIT => REG_D
1 27 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
0
9
25
0
0

1 4 55         #  copy REG_A => var:arg
1 55 4         #  copy var:arg => REG_A
1 45 6         #  write "on" => REG_B
1 46 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 37           #  jump_if lbl:debug_command_on
1 55 4         #  copy var:arg => REG_A
1 47 6         #  write "off" => REG_B
1 46 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 39           #  jump_if lbl:debug_command_off
1 48 4         #  write "Unknown argument. Expected: debug on/debug off" => REG_A
1 49 6         #  write COLOR_RED => REG_B
1 50 10        #  write SYS_CALL_PRINTLN => REG_D
1 51 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 52 4         #  write "1" => REG_A
1 53 10        #  write SYS_CALL_EXIT => REG_D
1 51 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
DEBUG_ON       #  DEBUG_ON
3 41           #  jump lbl:exit
DEBUG_OFF      #  DEBUG_OFF
3 41           #  jump lbl:exit
1 54 4         #  write "0" => REG_A
1 53 10        #  write SYS_CALL_EXIT => REG_D
1 51 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
on
8
off
Unknown argument. Expected: debug on/debug off
3
1
25
1
0
0







1 27 2         #  write OP_IS_NUM => REG_OP
0              #  cpu_exec
5 23           #  jump_if_not lbl:exit
1 28 10        #  write SYS_CALL_SLEEP => REG_D
1 29 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 30 4         #  write "0" => REG_A
1 31 10        #  write SYS_CALL_EXIT => REG_D
1 29 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
7
11
25
0
0
1 56 4         #  write "Enter command to schedule or command exit to quit:" => REG_A
1 57 6         #  write COLOR_NO => REG_B
1 58 10        #  write SYS_CALL_PRINTLN => REG_D
1 59 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 60 4         #  write KEYBOARD_READ_LINE => REG_A
1 61 10        #  write SYS_CALL_READ_INPUT => REG_D
1 59 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 12 4         #  copy REG_RES => REG_A
1 62 6         #  write "exit" => REG_B
1 63 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 46           #  jump_if lbl:exit
1 64 6         #  write "50" => REG_B
1 65 10        #  write SYS_CALL_SCHED_PROGRAM => REG_D
1 59 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 50           #  jump_err lbl:error
1 12 72        #  copy REG_RES => var:pid
1 66 4         #  write "Program loaded with PID " => REG_A
1 67 6         #  write COLOR_GREEN => REG_B
1 68 10        #  write SYS_CALL_PRINT => REG_D
1 59 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 72 4         #  copy var:pid => REG_A
1 58 10        #  write SYS_CALL_PRINTLN => REG_D
0              #  cpu_exec
3 17           #  jump lbl:start
1 69 4         #  write "0" => REG_A
1 70 10        #  write SYS_CALL_EXIT => REG_D
1 59 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 16 4         #  copy REG_ERROR => REG_A
1 71 6         #  write COLOR_RED => REG_B
1 58 10        #  write SYS_CALL_PRINTLN => REG_D
1 59 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
3 17           #  jump lbl:start
Enter command to schedule or command exit to quit:
0
1
25
KeyboardReadLine
3
exit
8
50
14
Program loaded with PID 
1
2
0
0
3





1 4 165        #  copy REG_A => var:iterations
1 126 4        #  write COLOR_CYAN => REG_A
1 127 10       #  write SYS_CALL_SET_BACKGROUND => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 129 170      #  write "cccccccccccccccccccccccccccc" => 170
1 129 171      #  write "cccccccccccccccccccccccccccc" => 171
1 129 172      #  write "cccccccccccccccccccccccccccc" => 172
1 129 173      #  write "cccccccccccccccccccccccccccc" => 173
1 130 174      #  write "ccccccccccyyyyyyycccccccccccc" => 174
1 131 175      #  write "cccccccccyyyyyyyyyccccccccccc" => 175
1 132 176      #  write "ccccccccyybbyyybbyyccccccccc" => 176
1 133 177      #  write "ccccccccBbwBbBbwBbBccccccccc" => 177
1 134 178      #  write "ccccccccBbwwbBbwwbBccccccccc" => 178
1 135 179      #  write "ccccccccyybbyyybbyyccccccccc" => 179
1 136 180      #  write "ccccccccyyyyyyyyyyycccccccccc" => 180
1 137 181      #  write "ccccccccyyByyyyyByycccccccccc" => 181
1 138 182      #  write "ccccccccyyyBBBBByyycccccccccc" => 182
1 139 183      #  write "ccccccccbyyyyyyyyybcccccccccc" => 183
1 140 184      #  write "ccccccccybbbbbbbbbycccccccccc" => 184
1 141 185      #  write "ccccccccyybbbbbbbyycccccccccc" => 185
1 141 186      #  write "ccccccccyybbbbbbbyycccccccccc" => 186
1 140 187      #  write "ccccccccybbbbbbbbbycccccccccc" => 187
1 142 188      #  write "cccccccBBbbbbbbbbbBBccccccccc" => 188
1 143 189      #  write "ccccccccBbbbbbbbbbBcccccccccc" => 189
1 144 190      #  write "ccccccccccBBcccBBcccccccccccc" => 190
1 145 191      #  write "cccccccccBBBcccBBBccccccccccc" => 191
1 129 192      #  write "cccccccccccccccccccccccccccc" => 192
1 129 193      #  write "cccccccccccccccccccccccccccc" => 193
1 129 194      #  write "cccccccccccccccccccccccccccc" => 194
1 165 4        #  copy var:iterations => REG_A
1 146 2        #  write OP_DECR => REG_OP
0              #  cpu_exec
1 12 165       #  copy REG_RES => var:iterations
1 165 4        #  copy var:iterations => REG_A
1 147 6        #  write "0" => REG_B
1 148 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 118          #  jump_if lbl:exit
1 149 166      #  write "170" => var:counter
1 166 4        #  copy var:counter => REG_A
1 150 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 166       #  copy REG_RES => var:counter
1 166 4        #  copy var:counter => REG_A
1 151 6        #  write "21" => REG_B
1 152 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 166 4        #  copy var:counter => REG_A
1 12 6         #  copy REG_RES => REG_B
1 153 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 154 4        #  write "0.1" => REG_A
1 155 10       #  write SYS_CALL_SLEEP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 166 4        #  copy var:counter => REG_A
1 156 6        #  write "174" => REG_B
1 157 2        #  write OP_CMP_NEQ => REG_OP
0              #  cpu_exec
4 57           #  jump_if lbl:loop_move_up
1 166 4        #  copy var:counter => REG_A
1 146 2        #  write OP_DECR => REG_OP
0              #  cpu_exec
1 12 166       #  copy REG_RES => var:counter
1 166 4        #  copy var:counter => REG_A
1 151 6        #  write "21" => REG_B
1 152 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 166 4        #  copy var:counter => REG_A
1 12 6         #  copy REG_RES => REG_B
1 153 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 154 4        #  write "0.1" => REG_A
1 155 10       #  write SYS_CALL_SLEEP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 149 4        #  write "170" => REG_A
1 166 6        #  copy var:counter => REG_B
1 158 2        #  write OP_CMP_LT => REG_OP
0              #  cpu_exec
4 79           #  jump_if lbl:loop_move_down
1 149 166      #  write "170" => var:counter
1 159 4        #  write "c" => REG_A
1 *166 6       #  copy *var:counter => REG_B
1 160 8        #  write "" => REG_C
1 161 2        #  write OP_CONCAT_WITH => REG_OP
0              #  cpu_exec
1 12 *166      #  copy REG_RES => *var:counter
1 166 4        #  copy var:counter => REG_A
1 150 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 166       #  copy REG_RES => var:counter
1 166 4        #  copy var:counter => REG_A
1 162 6        #  write "192" => REG_B
1 158 2        #  write OP_CMP_LT => REG_OP
0              #  cpu_exec
4 102          #  jump_if lbl:shift_right
3 47           #  jump lbl:start
1 163 4        #  write COLOR_NO => REG_A
1 127 10       #  write SYS_CALL_SET_BACKGROUND => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 147 4        #  write "0" => REG_A
1 164 10       #  write SYS_CALL_EXIT => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
7
9
25
cccccccccccccccccccccccccccc
ccccccccccyyyyyyycccccccccccc
cccccccccyyyyyyyyyccccccccccc
ccccccccyybbyyybbyyccccccccc
ccccccccBbwBbBbwBbBccccccccc
ccccccccBbwwbBbwwbBccccccccc
ccccccccyybbyyybbyyccccccccc
ccccccccyyyyyyyyyyycccccccccc
ccccccccyyByyyyyByycccccccccc
ccccccccyyyBBBBByyycccccccccc
ccccccccbyyyyyyyyybcccccccccc
ccccccccybbbbbbbbbycccccccccc
ccccccccyybbbbbbbyycccccccccc
cccccccBBbbbbbbbbbBBccccccccc
ccccccccBbbbbbbbbbBcccccccccc
ccccccccccBBcccBBcccccccccccc
cccccccccBBBcccBBBccccccccccc
3
0
8
170
2
21
0
10
0.1
11
174
9
10
c

17
192
0
0




1 76 4         #  write "1.txt" => REG_A
1 77 10        #  write SYS_CALL_OPEN => REG_D
1 78 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 67           #  jump_err lbl:error
1 12 94        #  copy REG_RES => var:fd
1 79 4         #  write "Enter name: " => REG_A
1 80 10        #  write SYS_CALL_PRINT => REG_D
1 78 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 81 10        #  write SYS_CALL_READ_INPUT => REG_D
1 78 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 12 95        #  copy REG_RES => var:name
1 82 4         #  write "Enter age: " => REG_A
1 80 10        #  write SYS_CALL_PRINT => REG_D
1 78 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 81 10        #  write SYS_CALL_READ_INPUT => REG_D
1 78 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 12 96        #  copy REG_RES => var:age
1 94 4         #  copy var:fd => REG_A
1 83 6         #  write "1" => REG_B
1 95 8         #  copy var:name => REG_C
1 84 10        #  write SYS_CALL_WRITE => REG_D
1 78 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 67           #  jump_err lbl:error
1 94 4         #  copy var:fd => REG_A
1 85 6         #  write "2" => REG_B
1 96 8         #  copy var:age => REG_C
1 84 10        #  write SYS_CALL_WRITE => REG_D
1 78 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 67           #  jump_err lbl:error
1 94 4         #  copy var:fd => REG_A
1 86 10        #  write SYS_CALL_CLOSE => REG_D
1 78 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 67           #  jump_err lbl:error
1 87 4         #  write "hello" => REG_A
1 83 6         #  write "1" => REG_B
1 88 10        #  write SYS_CALL_SCHED_PROGRAM => REG_D
1 78 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 89 4         #  write "0" => REG_A
1 90 10        #  write SYS_CALL_EXIT => REG_D
1 78 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 91 4         #  write "Error" => REG_A
1 92 6         #  write COLOR_RED => REG_B
1 84 10        #  write SYS_CALL_WRITE => REG_D
1 78 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 93 4         #  write "1" => REG_A
1 90 10        #  write SYS_CALL_EXIT => REG_D
1 78 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1.txt
4
25
Enter name: 
2
3
Enter age: 
1
8
2
6
hello
14
0
0
Error
3
1



1 78 4         #  write "1.txt" => REG_A
1 79 10        #  write SYS_CALL_OPEN => REG_D
1 80 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 69           #  jump_err lbl:error
1 12 98        #  copy REG_RES => var:fd
1 81 4         #  write "Hello, " => REG_A
1 82 6         #  write COLOR_GREEN => REG_B
1 83 10        #  write SYS_CALL_PRINT => REG_D
1 80 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 98 4         #  copy var:fd => REG_A
1 84 6         #  write "1" => REG_B
1 85 10        #  write SYS_CALL_READ => REG_D
1 80 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 69           #  jump_err lbl:error
1 12 4         #  copy REG_RES => REG_A
1 86 6         #  write COLOR_YELLOW => REG_B
1 83 10        #  write SYS_CALL_PRINT => REG_D
1 80 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 87 4         #  write " with the age of " => REG_A
1 82 6         #  write COLOR_GREEN => REG_B
1 83 10        #  write SYS_CALL_PRINT => REG_D
1 80 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 98 4         #  copy var:fd => REG_A
1 88 6         #  write "2" => REG_B
1 85 10        #  write SYS_CALL_READ => REG_D
1 80 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 69           #  jump_err lbl:error
1 12 4         #  copy REG_RES => REG_A
1 86 6         #  write COLOR_YELLOW => REG_B
1 83 10        #  write SYS_CALL_PRINT => REG_D
1 80 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 89 4         #  write " years." => REG_A
1 82 6         #  write COLOR_GREEN => REG_B
1 90 10        #  write SYS_CALL_PRINTLN => REG_D
1 80 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 98 4         #  copy var:fd => REG_A
1 91 10        #  write SYS_CALL_CLOSE => REG_D
1 80 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 69           #  jump_err lbl:error
1 92 4         #  write "0" => REG_A
1 93 10        #  write SYS_CALL_EXIT => REG_D
1 80 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 94 4         #  write "Error" => REG_A
1 95 6         #  write COLOR_RED => REG_B
1 96 10        #  write SYS_CALL_WRITE => REG_D
1 80 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 97 4         #  write "1" => REG_A
1 93 10        #  write SYS_CALL_EXIT => REG_D
1 80 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1.txt
4
25
Hello, 
1
2
1
7
2
 with the age of 
2
 years.
1
6
0
0
Error
3
8
1



1 62 77        #  write "1" => var:ptr
1 62 79        #  write "1" => var:priority
1 4 4          #  copy REG_A => REG_A
1 63 10        #  write SYS_CALL_OPEN => REG_D
1 64 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 53           #  jump_err lbl:error
1 12 76        #  copy REG_RES => var:fd
1 76 4         #  copy var:fd => REG_A
1 77 6         #  copy var:ptr => REG_B
1 65 10        #  write SYS_CALL_READ => REG_D
1 64 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 12 78        #  copy REG_RES => var:program
1 16 4         #  copy REG_ERROR => REG_A
1 66 6         #  write "EOF" => REG_B
1 67 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 49           #  jump_if lbl:exit
6 53           #  jump_err lbl:error
1 78 4         #  copy var:program => REG_A
1 79 6         #  copy var:priority => REG_B
1 68 10        #  write SYS_CALL_SCHED_PROGRAM => REG_D
1 64 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 53           #  jump_err lbl:error
1 77 4         #  copy var:ptr => REG_A
1 69 2         #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 77        #  copy REG_RES => var:ptr
1 12 79        #  copy REG_RES => var:priority
3 25           #  jump lbl:main
1 70 4         #  write "0" => REG_A
1 71 10        #  write SYS_CALL_EXIT => REG_D
1 64 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 72 4         #  write "Error" => REG_A
1 73 6         #  write COLOR_RED => REG_B
1 74 10        #  write SYS_CALL_PRINTLN => REG_D
1 64 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 75 4         #  write "1" => REG_A
1 71 10        #  write SYS_CALL_EXIT => REG_D
1 64 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1
4
25
7
EOF
8
14
2
0
0
Error
3
1
1













1 6 125        #  copy REG_B => var:input_file
1 4 126        #  copy REG_A => var:line_count
1 125 4        #  copy var:input_file => REG_A
1 103 6        #  write "" => REG_B
1 104 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 99           #  jump_if lbl:exit_error
1 126 4        #  copy var:line_count => REG_A
1 103 6        #  write "" => REG_B
1 104 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 99           #  jump_if lbl:exit_error
1 126 4        #  copy var:line_count => REG_A
1 105 6        #  write "-" => REG_B
1 106 2        #  write OP_STARTS_WITH => REG_OP
0              #  cpu_exec
5 99           #  jump_if_not lbl:exit_error
1 126 4        #  copy var:line_count => REG_A
1 107 6        #  write "1" => REG_B
1 103 8        #  write "" => REG_C
1 108 2        #  write OP_REPLACE_COLUMN => REG_OP
0              #  cpu_exec
1 12 126       #  copy REG_RES => var:line_count
1 126 4        #  copy var:line_count => REG_A
1 109 2        #  write OP_IS_NUM => REG_OP
0              #  cpu_exec
5 99           #  jump_if_not lbl:exit_error
1 125 4        #  copy var:input_file => REG_A
1 110 10       #  write SYS_CALL_OPEN => REG_D
1 111 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 99           #  jump_err lbl:exit_error
1 12 128       #  copy REG_RES => var:fd
1 128 4        #  copy var:fd => REG_A
1 112 10       #  write SYS_CALL_DESCRIPTOR_INFO => REG_D
1 111 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 99           #  jump_err lbl:exit_error
1 12 4         #  copy REG_RES => REG_A
1 113 6        #  write "4" => REG_B
1 114 8        #  write " " => REG_C
1 115 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 127       #  copy REG_RES => var:counter
1 127 4        #  copy var:counter => REG_A
1 126 6        #  copy var:line_count => REG_B
1 116 2        #  write OP_CMP_LE => REG_OP
0              #  cpu_exec
5 67           #  jump_if_not lbl:validate_continue
1 127 126      #  copy var:counter => var:line_count
1 127 4        #  copy var:counter => REG_A
1 126 6        #  copy var:line_count => REG_B
1 117 2        #  write OP_SUB => REG_OP
0              #  cpu_exec
1 12 126       #  copy REG_RES => var:line_count
1 126 4        #  copy var:line_count => REG_A
1 118 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 126       #  copy REG_RES => var:line_count
1 128 4        #  copy var:fd => REG_A
1 126 6        #  copy var:line_count => REG_B
1 119 10       #  write SYS_CALL_READ => REG_D
1 111 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 12 4         #  copy REG_RES => REG_A
1 120 6        #  write COLOR_GREEN => REG_B
1 121 10       #  write SYS_CALL_PRINTLN => REG_D
1 111 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 126 4        #  copy var:line_count => REG_A
1 118 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 126       #  copy REG_RES => var:line_count
1 126 4        #  copy var:line_count => REG_A
1 127 6        #  copy var:counter => REG_B
1 116 2        #  write OP_CMP_LE => REG_OP
0              #  cpu_exec
4 76           #  jump_if lbl:print_content_loop
1 122 4        #  write "0" => REG_A
1 123 10       #  write SYS_CALL_EXIT => REG_D
1 111 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 124 4        #  write "1" => REG_A
1 123 10       #  write SYS_CALL_EXIT => REG_D
1 111 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec

8
-
14
1
16
7
4
25
5
4
 
15
11
1
2
7
1
1
0
0
1




1 96 119       #  write "1" => var:counter
1 6 117        #  copy REG_B => var:input_file
1 4 118        #  copy REG_A => var:line_count
1 117 4        #  copy var:input_file => REG_A
1 97 6         #  write "" => REG_B
1 98 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 92           #  jump_if lbl:exit_error
1 118 4        #  copy var:line_count => REG_A
1 97 6         #  write "" => REG_B
1 98 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 92           #  jump_if lbl:exit_error
1 118 4        #  copy var:line_count => REG_A
1 99 6         #  write "-" => REG_B
1 100 2        #  write OP_STARTS_WITH => REG_OP
0              #  cpu_exec
5 92           #  jump_if_not lbl:exit_error
1 118 4        #  copy var:line_count => REG_A
1 96 6         #  write "1" => REG_B
1 97 8         #  write "" => REG_C
1 101 2        #  write OP_REPLACE_COLUMN => REG_OP
0              #  cpu_exec
1 12 118       #  copy REG_RES => var:line_count
1 118 4        #  copy var:line_count => REG_A
1 102 2        #  write OP_IS_NUM => REG_OP
0              #  cpu_exec
5 92           #  jump_if_not lbl:exit_error
1 117 4        #  copy var:input_file => REG_A
1 103 10       #  write SYS_CALL_OPEN => REG_D
1 104 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 92           #  jump_err lbl:exit_error
1 12 120       #  copy REG_RES => var:fd
1 120 4        #  copy var:fd => REG_A
1 105 10       #  write SYS_CALL_DESCRIPTOR_INFO => REG_D
1 104 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 92           #  jump_err lbl:exit_error
1 12 4         #  copy REG_RES => REG_A
1 106 6        #  write "4" => REG_B
1 107 8        #  write " " => REG_C
1 108 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 119       #  copy REG_RES => var:counter
1 119 4        #  copy var:counter => REG_A
1 118 6        #  copy var:line_count => REG_B
1 109 2        #  write OP_CMP_LE => REG_OP
0              #  cpu_exec
5 68           #  jump_if_not lbl:validate_continue
1 119 118      #  copy var:counter => var:line_count
1 96 119       #  write "1" => var:counter
1 120 4        #  copy var:fd => REG_A
1 119 6        #  copy var:counter => REG_B
1 110 10       #  write SYS_CALL_READ => REG_D
1 104 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 12 4         #  copy REG_RES => REG_A
1 111 6        #  write COLOR_GREEN => REG_B
1 112 10       #  write SYS_CALL_PRINTLN => REG_D
1 104 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 119 4        #  copy var:counter => REG_A
1 113 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 119       #  copy REG_RES => var:counter
1 119 4        #  copy var:counter => REG_A
1 118 6        #  copy var:line_count => REG_B
1 109 2        #  write OP_CMP_LE => REG_OP
0              #  cpu_exec
4 69           #  jump_if lbl:print_content_loop
1 114 4        #  write "0" => REG_A
1 115 10       #  write SYS_CALL_EXIT => REG_D
1 104 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 116 4        #  write "1" => REG_A
1 115 10       #  write SYS_CALL_EXIT => REG_D
1 104 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1

8
-
14
16
7
4
25
5
4
 
15
11
7
1
1
2
0
0
1





FS_HEADER kagu_fs FIRST_USABLE_BLOCK 1021 LAST_USABLE_BLOCK 1500
socket.txt 7 7 7 user user BLOCKS 1021 1028
test_socket 7 7 7 user user BLOCKS 1029 1159
handler 7 7 7 user user BLOCKS 1160 1303
kill_process 7 7 7 user user BLOCKS 1304 1390














FS_HEADER_END
ERROR
nnnnnnn
nnngnnn
nnggnnn
ngngnnn
nnngnnn
nnngnnn
nnnnnnn
1 114 4        #  write "socket.txt" => REG_A
1 115 10       #  write SYS_CALL_OPEN => REG_D
1 116 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 12 147       #  copy REG_RES => var:fd
1 117 10       #  write SYS_CALL_READ_INPUT => REG_D
1 116 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 118 4        #  write "GET" => REG_A
1 12 6         #  copy REG_RES => REG_B
1 119 8        #  write " " => REG_C
1 120 2        #  write OP_CONCAT_WITH => REG_OP
0              #  cpu_exec
1 147 4        #  copy var:fd => REG_A
1 121 6        #  write "1" => REG_B
1 12 8         #  copy REG_RES => REG_C
1 122 10       #  write SYS_CALL_WRITE => REG_D
1 116 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 123 4        #  write "handler" => REG_A
1 124 6        #  write "50" => REG_B
1 125 10       #  write SYS_CALL_SCHED_PROGRAM => REG_D
1 116 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 126 10       #  write SYS_CALL_WAIT_SCHED => REG_D
1 116 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 147 4        #  copy var:fd => REG_A
1 121 6        #  write "1" => REG_B
1 127 10       #  write SYS_CALL_READ => REG_D
1 116 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 12 4         #  copy REG_RES => REG_A
1 128 6        #  write "OK" => REG_B
1 129 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
5 105          #  jump_if_not lbl:error
1 147 4        #  copy var:fd => REG_A
1 130 6        #  write "2" => REG_B
1 127 10       #  write SYS_CALL_READ => REG_D
1 116 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 12 190       #  copy REG_RES => 190
1 131 6        #  write "3" => REG_B
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 12 191       #  copy REG_RES => 191
1 132 6        #  write "4" => REG_B
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 12 192       #  copy REG_RES => 192
1 133 6        #  write "5" => REG_B
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 12 193       #  copy REG_RES => 193
1 134 6        #  write "6" => REG_B
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 12 194       #  copy REG_RES => 194
1 135 6        #  write "7" => REG_B
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 12 195       #  copy REG_RES => 195
1 136 6        #  write "8" => REG_B
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 12 196       #  copy REG_RES => 196
1 137 4        #  write "190" => REG_A
1 138 6        #  write "197" => REG_B
1 139 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 116 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 147 4        #  copy var:fd => REG_A
1 140 10       #  write SYS_CALL_CLOSE => REG_D
1 116 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 105          #  jump_err lbl:error
1 141 4        #  write "0" => REG_A
1 142 10       #  write SYS_CALL_EXIT => REG_D
1 116 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 143 4        #  write "Error occured" => REG_A
1 144 6        #  write COLOR_RED => REG_B
1 145 10       #  write SYS_CALL_PRINTLN => REG_D
1 116 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 146 4        #  write "1" => REG_A
1 142 10       #  write SYS_CALL_EXIT => REG_D
1 116 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
socket.txt
4
25
3
GET
 
17
1
8
handler
50
14
18
7
OK
8
2
3
4
5
6
7
8
190
197
10
6
0
0
Error occured
3
1
1

1 128 4        #  write "socket.txt" => REG_A
1 129 10       #  write SYS_CALL_OPEN => REG_D
1 130 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 12 160       #  copy REG_RES => var:fd
1 160 4        #  copy var:fd => REG_A
1 131 6        #  write "1" => REG_B
1 132 10       #  write SYS_CALL_READ => REG_D
1 130 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 12 4         #  copy REG_RES => REG_A
1 133 6        #  write "GET 1" => REG_B
1 134 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 77           #  jump_if lbl:write_1
1 135 6        #  write "GET 0" => REG_B
0              #  cpu_exec
4 45           #  jump_if lbl:write_0
1 160 4        #  copy var:fd => REG_A
1 131 6        #  write "1" => REG_B
1 136 8        #  write "ERROR" => REG_C
1 137 10       #  write SYS_CALL_WRITE => REG_D
1 130 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 119          #  jump_err lbl:error
3 110          #  jump lbl:exit
1 160 4        #  copy var:fd => REG_A
1 131 6        #  write "1" => REG_B
1 138 8        #  write "OK" => REG_C
1 137 10       #  write SYS_CALL_WRITE => REG_D
1 130 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 139 6        #  write "2" => REG_B
1 140 8        #  write "nnrrnnn" => REG_C
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 141 6        #  write "8" => REG_B
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 142 6        #  write "3" => REG_B
1 143 8        #  write "nrrrrnn" => REG_C
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 144 6        #  write "7" => REG_B
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 145 6        #  write "4" => REG_B
1 146 8        #  write "rnnnnrn" => REG_C
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 147 6        #  write "5" => REG_B
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 148 6        #  write "6" => REG_B
0              #  cpu_exec
6 119          #  jump_err lbl:error
3 110          #  jump lbl:exit
1 160 4        #  copy var:fd => REG_A
1 131 6        #  write "1" => REG_B
1 138 8        #  write "OK" => REG_C
1 137 10       #  write SYS_CALL_WRITE => REG_D
1 130 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 139 6        #  write "2" => REG_B
1 149 8        #  write "nnnnnnn" => REG_C
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 141 6        #  write "8" => REG_B
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 142 6        #  write "3" => REG_B
1 150 8        #  write "nnngnnn" => REG_C
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 148 6        #  write "6" => REG_B
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 144 6        #  write "7" => REG_B
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 145 6        #  write "4" => REG_B
1 151 8        #  write "nnggnnn" => REG_C
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 147 6        #  write "5" => REG_B
1 152 8        #  write "ngngnnn" => REG_C
0              #  cpu_exec
6 119          #  jump_err lbl:error
3 110          #  jump lbl:exit
1 160 4        #  copy var:fd => REG_A
1 153 10       #  write SYS_CALL_CLOSE => REG_D
1 130 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 119          #  jump_err lbl:error
1 154 4        #  write "0" => REG_A
1 155 10       #  write SYS_CALL_EXIT => REG_D
1 130 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 156 4        #  write "Error occured" => REG_A
1 157 6        #  write COLOR_RED => REG_B
1 158 10       #  write SYS_CALL_PRINTLN => REG_D
1 130 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 159 4        #  write "1" => REG_A
1 155 10       #  write SYS_CALL_EXIT => REG_D
1 130 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
socket.txt
4
25
1
7
GET 1
8
GET 0
ERROR
8
OK
2
nnrrnnn
8
3
nrrrrnn
7
4
rnnnnrn
5
6
nnnnnnn
nnngnnn
nnggnnn
ngngnnn
6
0
0
Error occured
3
1
1

1 83 4         #  write "Enter filename: " => REG_A
1 84 6         #  write COLOR_GREEN => REG_B
1 85 10        #  write SYS_CALL_PRINT => REG_D
1 86 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 87 10        #  write SYS_CALL_READ_INPUT => REG_D
1 86 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 88 4         #  write "cat" => REG_A
1 12 6         #  copy REG_RES => REG_B
1 89 8         #  write " " => REG_C
1 90 2         #  write OP_CONCAT_WITH => REG_OP
0              #  cpu_exec
1 12 4         #  copy REG_RES => REG_A
1 91 10        #  write SYS_CALL_SCHED_PROGRAM => REG_D
1 86 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 74           #  jump_err lbl:error
1 12 103       #  copy REG_RES => var:pid
1 92 10        #  write SYS_CALL_SKIP_SCHED => REG_D
1 86 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 74           #  jump_err lbl:error
1 92 10        #  write SYS_CALL_SKIP_SCHED => REG_D
1 86 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 74           #  jump_err lbl:error
1 92 10        #  write SYS_CALL_SKIP_SCHED => REG_D
1 86 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 74           #  jump_err lbl:error
1 103 4        #  copy var:pid => REG_A
1 93 10        #  write SYS_CALL_IS_PROCESS_ACTIVE => REG_D
1 86 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 65           #  jump_err lbl:ok
3 54           #  jump lbl:kill
1 94 4         #  write "No way. cat process was killed" => REG_A
1 95 6         #  write COLOR_RED => REG_B
1 96 10        #  write SYS_CALL_PRINTLN => REG_D
1 86 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 103 4        #  copy var:pid => REG_A
1 97 10        #  write SYS_CALL_KILL_PROCESS => REG_D
1 86 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 74           #  jump_err lbl:error
3 70           #  jump lbl:exit
1 98 4         #  write "Ok" => REG_A
1 84 6         #  write COLOR_GREEN => REG_B
1 96 10        #  write SYS_CALL_PRINTLN => REG_D
1 86 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 99 4         #  write "0" => REG_A
1 100 10       #  write SYS_CALL_EXIT => REG_D
1 86 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 101 4        #  write "Error occured" => REG_A
1 95 6         #  write COLOR_RED => REG_B
1 96 10        #  write SYS_CALL_PRINTLN => REG_D
1 86 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 102 4        #  write "1" => REG_A
1 100 10       #  write SYS_CALL_EXIT => REG_D
1 86 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
Enter filename: 
1
2
25
3
cat
 
17
14
17
15
No way. cat process was killed
3
1
16
Ok
0
0
Error occured
1















































































































FS_HEADER kagu_fs FIRST_USABLE_BLOCK 1522 LAST_USABLE_BLOCK 1800
bye 7 7 7 user user BLOCKS 1522 1757


















FS_HEADER_END
1 161 894      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 894
1 162 895      #  write "nnnnnnnnnnggggnnngnnnnngnngggggggnnnnnnnnnnnnnnnnnnn" => 895
1 163 896      #  write "nnnnnnnnnngnngnnnngnnngnnngnnnnnnnnnnnnnnnnnnnnnnnnn" => 896
1 164 897      #  write "nnnnnnnnnngnngnnnnngngnnnngnnnnnnnnnnnnnnnnnnnnnnnnn" => 897
1 165 898      #  write "nnnnnnnnnngggggnnnngggnnnnggggggnnnnnnnnnnnnnnnnnnnn" => 898
1 166 899      #  write "nnnnnnnnnngnnngnnnnngnnnnngnnnnnnnnnnnnnnnnnnnnnnnnn" => 899
1 166 900      #  write "nnnnnnnnnngnnngnnnnngnnnnngnnnnnnnnnnnnnnnnnnnnnnnnn" => 900
1 167 901      #  write "nnnnnnnnnnggggnnnnnngnnnnnggggggggnggnnnnnnnnnnnnnnn" => 901
1 168 902      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnngnnnnnnnnnnnnnnnn" => 902
1 169 903      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnngnnnnnnnnnnnnnnnnn" => 903
1 161 904      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 904
1 170 905      #  write "ngnnngnnnnnngnnnnnnnnggggnnnngggnnnngggnnnggnnnnnnnn" => 905
1 171 906      #  write "ngnngnnnnnngggnnnnngggnngggnnngnnnnnngnnnnggnnnnnnnn" => 906
1 172 907      #  write "ngnggnnnnnngngnnnnngnnnnnngnnngnnnnnngnnnnggnnnnnnnn" => 907
1 173 908      #  write "ngggnnnnnngggggnnnngnnnnnnnnnngnnnnnngnnnnggnnnnnnnn" => 908
1 174 909      #  write "ngngnnnnnngnnngnnnngnnnngggnnngnnnnnngnnnnggnnnnnnnn" => 909
1 175 910      #  write "ngnngnnnngnnnnngnnngnnnnngnnnngnnnnnngnnnnnnnnnnnnnn" => 910
1 176 911      #  write "ngnnggnngnnnnnnngnnnggggggnnnnnggggggnnnnnggnnnnnnnn" => 911
1 161 912      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 912
1 161 794      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 794
1 177 795      #  write "nnnnnnnnnnyyyynnnynnnnnynnyyyyyyynnnnnnnnnnnnnnnnnnn" => 795
1 178 796      #  write "nnnnnnnnnnynnynnnnynnnynnnynnnnnnnnnnnnnnnnnnnnnnnnn" => 796
1 179 797      #  write "nnnnnnnnnnynnynnnnnynynnnnynnnnnnnnnnnnnnnnnnnnnnnnn" => 797
1 180 798      #  write "nnnnnnnnnnyyyyynnnnyyynnnnyyyyyynnnnnnnnnnnnnnnnnnnn" => 798
1 181 799      #  write "nnnnnnnnnnynnnynnnnnynnnnnynnnnnnnnnnnnnnnnnnnnnnnnn" => 799
1 181 800      #  write "nnnnnnnnnnynnnynnnnnynnnnnynnnnnnnnnnnnnnnnnnnnnnnnn" => 800
1 182 801      #  write "nnnnnnnnnnyyyynnnnnnynnnnnyyyyyyyynyynnnnnnnnnnnnnnn" => 801
1 183 802      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnynnnnnnnnnnnnnnnn" => 802
1 184 803      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnynnnnnnnnnnnnnnnnn" => 803
1 161 804      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 804
1 185 805      #  write "nynnnynnnnnnynnnnnnnnyyyynnnnyyynnnnyyynnnyynnnnnnnn" => 805
1 186 806      #  write "nynnynnnnnnyyynnnnnyyynnyyynnnynnnnnnynnnnyynnnnnnnn" => 806
1 187 807      #  write "nynyynnnnnnynynnnnnynnnnnnynnnynnnnnnynnnnyynnnnnnnn" => 807
1 188 808      #  write "nyyynnnnnnyyyyynnnnynnnnnnnnnnynnnnnnynnnnyynnnnnnnn" => 808
1 189 809      #  write "nynynnnnnnynnnynnnnynnnnyyynnnynnnnnnynnnnyynnnnnnnn" => 809
1 190 810      #  write "nynnynnnnynnnnnynnnynnnnnynnnnynnnnnnynnnnnnnnnnnnnn" => 810
1 191 811      #  write "nynnyynnynnnnnnnynnnyyyyyynnnnnyyyyyynnnnnyynnnnnnnn" => 811
1 161 812      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 812
1 161 694      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 694
1 192 695      #  write "nnnnnnnnnnrrrrnnnrnnnnnrnnrrrrrrrnnnnnnnnnnnnnnnnnnn" => 695
1 193 696      #  write "nnnnnnnnnnrnnrnnnnrnnnrnnnrnnnnnnnnnnnnnnnnnnnnnnnnn" => 696
1 194 697      #  write "nnnnnnnnnnrnnrnnnnnrnrnnnnrnnnnnnnnnnnnnnnnnnnnnnnnn" => 697
1 195 698      #  write "nnnnnnnnnnrrrrrnnnnrrrnnnnrrrrrrnnnnnnnnnnnnnnnnnnnn" => 698
1 196 699      #  write "nnnnnnnnnnrnnnrnnnnnrnnnnnrnnnnnnnnnnnnnnnnnnnnnnnnn" => 699
1 196 700      #  write "nnnnnnnnnnrnnnrnnnnnrnnnnnrnnnnnnnnnnnnnnnnnnnnnnnnn" => 700
1 197 701      #  write "nnnnnnnnnnrrrrnnnnnnrnnnnnrrrrrrrrnrrnnnnnnnnnnnnnnn" => 701
1 198 702      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnrnnnnnnnnnnnnnnnn" => 702
1 199 703      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnrnnnnnnnnnnnnnnnnn" => 703
1 161 704      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 704
1 200 705      #  write "nrnnnrnnnnnnrnnnnnnnnrrrrnnnnrrrnnnnrrrnnnrrnnnnnnnn" => 705
1 201 706      #  write "nrnnrnnnnnnrrrnnnnnrrrnnrrrnnnrnnnnnnrnnnnrrnnnnnnnn" => 706
1 202 707      #  write "nrnrrnnnnnnrnrnnnnnrnnnnnnrnnnrnnnnnnrnnnnrrnnnnnnnn" => 707
1 203 708      #  write "nrrrnnnnnnrrrrrnnnnrnnnnnnnnnnrnnnnnnrnnnnrrnnnnnnnn" => 708
1 204 709      #  write "nrnrnnnnnnrnnnrnnnnrnnnnrrrnnnrnnnnnnrnnnnrrnnnnnnnn" => 709
1 205 710      #  write "nrnnrnnnnrnnnnnrnnnrnnnnnrnnnnrnnnnnnrnnnnnnnnnnnnnn" => 710
1 206 711      #  write "nrnnrrnnrnnnnnnnrnnnrrrrrrnnnnnrrrrrrnnnnnrrnnnnnnnn" => 711
1 161 712      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 712
1 161 594      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 594
1 207 595      #  write "nnnnnnnnnnbbbbnnnbnnnnnbnnbbbbbbbnnnnnnnnnnnnnnnnnnn" => 595
1 208 596      #  write "nnnnnnnnnnbnnbnnnnbnnnbnnnbnnnnnnnnnnnnnnnnnnnnnnnnn" => 596
1 209 597      #  write "nnnnnnnnnnbnnbnnnnnbnbnnnnbnnnnnnnnnnnnnnnnnnnnnnnnn" => 597
1 210 598      #  write "nnnnnnnnnnbbbbbnnnnbbbnnnnbbbbbbnnnnnnnnnnnnnnnnnnnn" => 598
1 211 599      #  write "nnnnnnnnnnbnnnbnnnnnbnnnnnbnnnnnnnnnnnnnnnnnnnnnnnnn" => 599
1 211 600      #  write "nnnnnnnnnnbnnnbnnnnnbnnnnnbnnnnnnnnnnnnnnnnnnnnnnnnn" => 600
1 212 601      #  write "nnnnnnnnnnbbbbnnnnnnbnnnnnbbbbbbbbnbbnnnnnnnnnnnnnnn" => 601
1 213 602      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnbnnnnnnnnnnnnnnnn" => 602
1 214 603      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnbnnnnnnnnnnnnnnnnn" => 603
1 161 604      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 604
1 215 605      #  write "nbnnnbnnnnnnbnnnnnnnnbbbbnnnnbbbnnnnbbbnnnbbnnnnnnnn" => 605
1 216 606      #  write "nbnnbnnnnnnbbbnnnnnbbbnnbbbnnnbnnnnnnbnnnnbbnnnnnnnn" => 606
1 217 607      #  write "nbnbbnnnnnnbnbnnnnnbnnnnnnbnnnbnnnnnnbnnnnbbnnnnnnnn" => 607
1 218 608      #  write "nbbbnnnnnnbbbbbnnnnbnnnnnnnnnnbnnnnnnbnnnnbbnnnnnnnn" => 608
1 219 609      #  write "nbnbnnnnnnbnnnbnnnnbnnnnbbbnnnbnnnnnnbnnnnbbnnnnnnnn" => 609
1 220 610      #  write "nbnnbnnnnbnnnnnbnnnbnnnnnbnnnnbnnnnnnbnnnnnnnnnnnnnn" => 610
1 221 611      #  write "nbnnbbnnbnnnnnnnbnnnbbbbbbnnnnnbbbbbbnnnnnbbnnnnnnnn" => 611
1 161 612      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 612
1 161 494      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 494
1 222 495      #  write "nnnnnnnnnnmmmmnnnmnnnnnmnnmmmmmmmnnnnnnnnnnnnnnnnnnn" => 495
1 223 496      #  write "nnnnnnnnnnmnnmnnnnmnnnmnnnmnnnnnnnnnnnnnnnnnnnnnnnnn" => 496
1 224 497      #  write "nnnnnnnnnnmnnmnnnnnmnmnnnnmnnnnnnnnnnnnnnnnnnnnnnnnn" => 497
1 225 498      #  write "nnnnnnnnnnmmmmmnnnnmmmnnnnmmmmmmnnnnnnnnnnnnnnnnnnnn" => 498
1 226 499      #  write "nnnnnnnnnnmnnnmnnnnnmnnnnnmnnnnnnnnnnnnnnnnnnnnnnnnn" => 499
1 226 500      #  write "nnnnnnnnnnmnnnmnnnnnmnnnnnmnnnnnnnnnnnnnnnnnnnnnnnnn" => 500
1 227 501      #  write "nnnnnnnnnnmmmmnnnnnnmnnnnnmmmmmmmmnmmnnnnnnnnnnnnnnn" => 501
1 228 502      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnmnnnnnnnnnnnnnnnn" => 502
1 229 503      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnmnnnnnnnnnnnnnnnnn" => 503
1 161 504      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 504
1 230 505      #  write "nmnnnmnnnnnnmnnnnnnnnmmmmnnnnmmmnnnnmmmnnnmmnnnnnnnn" => 505
1 231 506      #  write "nmnnmnnnnnnmmmnnnnnmmmnnmmmnnnmnnnnnnmnnnnmmnnnnnnnn" => 506
1 232 507      #  write "nmnmmnnnnnnmnmnnnnnmnnnnnnmnnnmnnnnnnmnnnnmmnnnnnnnn" => 507
1 233 508      #  write "nmmmnnnnnnmmmmmnnnnmnnnnnnnnnnmnnnnnnmnnnnmmnnnnnnnn" => 508
1 234 509      #  write "nmnmnnnnnnmnnnmnnnnmnnnnmmmnnnmnnnnnnmnnnnmmnnnnnnnn" => 509
1 235 510      #  write "nmnnmnnnnmnnnnnmnnnmnnnnnmnnnnmnnnnnnmnnnnnnnnnnnnnn" => 510
1 236 511      #  write "nmnnmmnnmnnnnnnnmnnnmmmmmmnnnnnmmmmmmnnnnnmmnnnnnnnn" => 511
1 161 512      #  write "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn" => 512
1 237 4        #  write "894" => REG_A
1 238 6        #  write "913" => REG_B
1 239 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 240 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 241 4        #  write "1" => REG_A
1 242 10       #  write SYS_CALL_SLEEP => REG_D
1 240 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 243 4        #  write "794" => REG_A
1 244 6        #  write "813" => REG_B
1 239 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 240 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 241 4        #  write "1" => REG_A
1 242 10       #  write SYS_CALL_SLEEP => REG_D
1 240 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 245 4        #  write "694" => REG_A
1 246 6        #  write "713" => REG_B
1 239 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 240 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 241 4        #  write "1" => REG_A
1 242 10       #  write SYS_CALL_SLEEP => REG_D
1 240 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 247 4        #  write "594" => REG_A
1 248 6        #  write "613" => REG_B
1 239 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 240 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 241 4        #  write "1" => REG_A
1 242 10       #  write SYS_CALL_SLEEP => REG_D
1 240 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 249 4        #  write "494" => REG_A
1 250 6        #  write "513" => REG_B
1 239 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 240 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 241 4        #  write "1" => REG_A
1 242 10       #  write SYS_CALL_SLEEP => REG_D
1 240 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 251 4        #  write "0" => REG_A
1 252 10       #  write SYS_CALL_EXIT => REG_D
1 240 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnggggnnngnnnnngnngggggggnnnnnnnnnnnnnnnnnnn
nnnnnnnnnngnngnnnngnnngnnngnnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnngnngnnnnngngnnnngnnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnngggggnnnngggnnnnggggggnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnngnnngnnnnngnnnnngnnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnggggnnnnnngnnnnnggggggggnggnnnnnnnnnnnnnnn
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnngnnnnnnnnnnnnnnnn
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnngnnnnnnnnnnnnnnnnn
ngnnngnnnnnngnnnnnnnnggggnnnngggnnnngggnnnggnnnnnnnn
ngnngnnnnnngggnnnnngggnngggnnngnnnnnngnnnnggnnnnnnnn
ngnggnnnnnngngnnnnngnnnnnngnnngnnnnnngnnnnggnnnnnnnn
ngggnnnnnngggggnnnngnnnnnnnnnngnnnnnngnnnnggnnnnnnnn
ngngnnnnnngnnngnnnngnnnngggnnngnnnnnngnnnnggnnnnnnnn
ngnngnnnngnnnnngnnngnnnnngnnnngnnnnnngnnnnnnnnnnnnnn
ngnnggnngnnnnnnngnnnggggggnnnnnggggggnnnnnggnnnnnnnn
nnnnnnnnnnyyyynnnynnnnnynnyyyyyyynnnnnnnnnnnnnnnnnnn
nnnnnnnnnnynnynnnnynnnynnnynnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnynnynnnnnynynnnnynnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnyyyyynnnnyyynnnnyyyyyynnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnynnnynnnnnynnnnnynnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnyyyynnnnnnynnnnnyyyyyyyynyynnnnnnnnnnnnnnn
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnynnnnnnnnnnnnnnnn
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnynnnnnnnnnnnnnnnnn
nynnnynnnnnnynnnnnnnnyyyynnnnyyynnnnyyynnnyynnnnnnnn
nynnynnnnnnyyynnnnnyyynnyyynnnynnnnnnynnnnyynnnnnnnn
nynyynnnnnnynynnnnnynnnnnnynnnynnnnnnynnnnyynnnnnnnn
nyyynnnnnnyyyyynnnnynnnnnnnnnnynnnnnnynnnnyynnnnnnnn
nynynnnnnnynnnynnnnynnnnyyynnnynnnnnnynnnnyynnnnnnnn
nynnynnnnynnnnnynnnynnnnnynnnnynnnnnnynnnnnnnnnnnnnn
nynnyynnynnnnnnnynnnyyyyyynnnnnyyyyyynnnnnyynnnnnnnn
nnnnnnnnnnrrrrnnnrnnnnnrnnrrrrrrrnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnrnnrnnnnrnnnrnnnrnnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnrnnrnnnnnrnrnnnnrnnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnrrrrrnnnnrrrnnnnrrrrrrnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnrnnnrnnnnnrnnnnnrnnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnrrrrnnnnnnrnnnnnrrrrrrrrnrrnnnnnnnnnnnnnnn
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnrnnnnnnnnnnnnnnnn
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnrnnnnnnnnnnnnnnnnn
nrnnnrnnnnnnrnnnnnnnnrrrrnnnnrrrnnnnrrrnnnrrnnnnnnnn
nrnnrnnnnnnrrrnnnnnrrrnnrrrnnnrnnnnnnrnnnnrrnnnnnnnn
nrnrrnnnnnnrnrnnnnnrnnnnnnrnnnrnnnnnnrnnnnrrnnnnnnnn
nrrrnnnnnnrrrrrnnnnrnnnnnnnnnnrnnnnnnrnnnnrrnnnnnnnn
nrnrnnnnnnrnnnrnnnnrnnnnrrrnnnrnnnnnnrnnnnrrnnnnnnnn
nrnnrnnnnrnnnnnrnnnrnnnnnrnnnnrnnnnnnrnnnnnnnnnnnnnn
nrnnrrnnrnnnnnnnrnnnrrrrrrnnnnnrrrrrrnnnnnrrnnnnnnnn
nnnnnnnnnnbbbbnnnbnnnnnbnnbbbbbbbnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnbnnbnnnnbnnnbnnnbnnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnbnnbnnnnnbnbnnnnbnnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnbbbbbnnnnbbbnnnnbbbbbbnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnbnnnbnnnnnbnnnnnbnnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnbbbbnnnnnnbnnnnnbbbbbbbbnbbnnnnnnnnnnnnnnn
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnbnnnnnnnnnnnnnnnn
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnbnnnnnnnnnnnnnnnnn
nbnnnbnnnnnnbnnnnnnnnbbbbnnnnbbbnnnnbbbnnnbbnnnnnnnn
nbnnbnnnnnnbbbnnnnnbbbnnbbbnnnbnnnnnnbnnnnbbnnnnnnnn
nbnbbnnnnnnbnbnnnnnbnnnnnnbnnnbnnnnnnbnnnnbbnnnnnnnn
nbbbnnnnnnbbbbbnnnnbnnnnnnnnnnbnnnnnnbnnnnbbnnnnnnnn
nbnbnnnnnnbnnnbnnnnbnnnnbbbnnnbnnnnnnbnnnnbbnnnnnnnn
nbnnbnnnnbnnnnnbnnnbnnnnnbnnnnbnnnnnnbnnnnnnnnnnnnnn
nbnnbbnnbnnnnnnnbnnnbbbbbbnnnnnbbbbbbnnnnnbbnnnnnnnn
nnnnnnnnnnmmmmnnnmnnnnnmnnmmmmmmmnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnmnnmnnnnmnnnmnnnmnnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnmnnmnnnnnmnmnnnnmnnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnmmmmmnnnnmmmnnnnmmmmmmnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnmnnnmnnnnnmnnnnnmnnnnnnnnnnnnnnnnnnnnnnnnn
nnnnnnnnnnmmmmnnnnnnmnnnnnmmmmmmmmnmmnnnnnnnnnnnnnnn
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnmnnnnnnnnnnnnnnnn
nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnmnnnnnnnnnnnnnnnnn
nmnnnmnnnnnnmnnnnnnnnmmmmnnnnmmmnnnnmmmnnnmmnnnnnnnn
nmnnmnnnnnnmmmnnnnnmmmnnmmmnnnmnnnnnnmnnnnmmnnnnnnnn
nmnmmnnnnnnmnmnnnnnmnnnnnnmnnnmnnnnnnmnnnnmmnnnnnnnn
nmmmnnnnnnmmmmmnnnnmnnnnnnnnnnmnnnnnnmnnnnmmnnnnnnnn
nmnmnnnnnnmnnnmnnnnmnnnnmmmnnnmnnnnnnmnnnnmmnnnnnnnn
nmnnmnnnnmnnnnnmnnnmnnnnnmnnnnmnnnnnnmnnnnnnnnnnnnnn
nmnnmmnnmnnnnnnnmnnnmmmmmmnnnnnmmmmmmnnnnnmmnnnnnnnn
894
913
10
25
1
11
794
813
694
713
594
613
494
513
0
0











































FS_HEADER kagu_fs FIRST_USABLE_BLOCK 1822 LAST_USABLE_BLOCK 2048



















FS_HEADER_END



































































































































































































































