// KaguOS kernel main code

// ##########################################
// # INITRAMFS_START                        #
// ##########################################
label kernel_entry_point

DEBUG_OFF

write "Operation register:" to INFO_REG_OP
write "A register:" to INFO_REG_A
write "B register:" to INFO_REG_B
write "C register:" to INFO_REG_C
write "D register:" to INFO_REG_D
write "Result register:" to INFO_REG_RES
write "Comparison result register:" to INFO_REG_BOOL_RES
write "Error register:" to INFO_REG_ERROR
write "Display buffer:" to INFO_DISPLAY_BUFFER
write "Display color:" to INFO_DISPLAY_COLOR
write "Keyboard buffer:" to INFO_KEYBOARD_BUFFER
write "Display background:" to INFO_DISPLAY_BACKGROUND
write "Program counter:" to INFO_PROGRAM_COUNTER
write "Free memory start:" to INFO_FREE_MEMORY_START
write "Free memory end:" to INFO_FREE_MEMORY_END
write "Free chunks:" to INFO_FREE_CHUNKS
write "" to FREE_CHUNKS

// Let's init pointer to the stack
//      var:sys_stack_ptr = FREE_MEMORY_END + 1
// Therefore on any push to stack we will decrement it
// If sys_stack_pop will be called incorrectly then we will get crashed
copy FREE_MEMORY_END to REG_A
write OP_INCR to REG_OP
cpu_exec
copy REG_RES to var:sys_stack_ptr

// init file system
copy PROGRAM_COUNTER to var:sys_return
jump label:sys_fs_init

// init system calls table and handler
copy PROGRAM_COUNTER to var:sys_return
jump label:sys_call_table_init

var sys_proc_memory_size
    var config_fd
    var config_line

    write "/config.txt" to REG_A
    copy PROGRAM_COUNTER to var:sys_return
    jump label:sys_fs_open
    jump_err label:no_config
    copy REG_RES to var:config_fd

    copy var:config_fd to REG_A
    write 1 to REG_B
    copy PROGRAM_COUNTER to var:sys_return
    jump label:sys_fs_read
    jump_err label:no_config
    copy REG_RES to var:config_line

    copy var:config_line to REG_A
    write 1 to REG_B
    write " " to REG_C
    write OP_GET_COLUMN to REG_OP
    cpu_exec

    copy REG_RES to REG_A
    write "proc_memory" to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if_not label:no_config

    copy var:config_line to REG_A
    write 2 to REG_B
    write " " to REG_C
    write OP_GET_COLUMN to REG_OP
    cpu_exec

    copy REG_RES to REG_A
    write OP_IS_NUM to REG_OP
    cpu_exec
    jump_if_not label:no_config
    copy REG_RES to var:sys_proc_memory_size

label config_close
    copy var:config_fd to REG_A
    write 1 to REG_B
    copy PROGRAM_COUNTER to var:sys_return
    jump label:sys_fs_read
    jump label:config_ok

label no_config
    write 200 to var:sys_proc_memory_size
    jump label:config_close

label config_ok
// Print welcome message
write "RAMFS init - done." to DISPLAY_BUFFER
write COLOR_GREEN to DISPLAY_COLOR
write OP_DISPLAY_LN to REG_OP
cpu_exec

// ##########################################
// # INITRAMFS_END                          #
// ##########################################


// ##########################################
// # KERNEL_START                           #
// ##########################################
    // # Display welcome message:
    write "Welcome to KaguOS" to DISPLAY_BUFFER
    write COLOR_GREEN to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec

    var exitStr
    write "exit" to var:exitStr

label kernel_start
    // Display prompt to enter the value:
    copy var:sys_work_dir to DISPLAY_BUFFER
    write "" to DISPLAY_COLOR
    write OP_DISPLAY to REG_OP
    cpu_exec
    write " :) " to DISPLAY_BUFFER
    cpu_exec

    // read cmd from keyboard
    write OP_READ_INPUT to REG_OP
    write KEYBOARD_READ_LINE to REG_A
    cpu_exec

    // split into command and arguments:
    copy KEYBOARD_BUFFER to REG_A
    write " " to REG_C
    write OP_GET_COLUMN to REG_OP

    // get the command name
    var parsedCmd
    write "1" to REG_B
    cpu_exec
    copy REG_RES to var:parsedCmd

    // Get the first argument of the command
    var parsedArg1
    write 2 to REG_B
    cpu_exec
    copy REG_RES to var:parsedArg1

    // Get the second argument of the command
    var parsedArg2
    write 3 to REG_B
    cpu_exec
    copy REG_RES to var:parsedArg2

    // Get the third argument of the command
    var parsedArg3
    write 4 to REG_B
    cpu_exec
    copy REG_RES to var:parsedArg3

    // Check if command is exit if not then jump to the start of the loop
    // otherwise we will go to the next instruction which is exit
    copy var:parsedCmd to REG_A
    copy var:exitStr to REG_B
    write OP_CMP_EQ to REG_OP
    cpu_exec
    jump_if label:kernel_end

    // Check that command is not empty and exec corresponding file :
    copy var:parsedCmd to REG_A
    write "" to REG_B
    write OP_CMP_NEQ to REG_OP
    cpu_exec
    jump_if label:exec_file

    jump label:kernel_start


label exec_file
    copy var:parsedCmd to REG_A

    // let's open file:
    var exec_file_desc
    copy var:parsedCmd to REG_A
    copy PROGRAM_COUNTER to var:sys_return
    jump label:sys_fs_open
    jump_err label:exec_file_error
    copy REG_RES to var:exec_file_desc

    // Read it line by line:
    var exec_file_counter
    write 1 to var:exec_file_counter

    copy FREE_MEMORY_START to REG_PROC_START_ADDRESS
    copy FREE_MEMORY_START to REG_A
    copy var:sys_proc_memory_size to REG_B
    write OP_ADD to REG_OP
    cpu_exec
    copy REG_RES to REG_PROC_END_ADDRESS

    copy REG_PROC_END_ADDRESS to REG_A
    write OP_INCR to REG_OP
    cpu_exec
    copy REG_RES to FREE_MEMORY_START

    // We will perform multiple add operations in row so we can set REG_A and REG_OP only once
    copy REG_PROC_START_ADDRESS to REG_A
    write OP_ADD to REG_OP

    // add 4 to get REG_A address of process and set parameter 1
    write 4 to REG_B
    cpu_exec
    copy var:parsedArg1 to *REG_RES

    // add 6 to get REG_B address of process and set parameter 2
    write 6 to REG_B
    cpu_exec
    copy var:parsedArg2 to *REG_RES

    // add 8 to get REG_C address of process and set parameter 3
    write 8 to REG_C
    cpu_exec
    copy var:parsedArg3 to *REG_RES

    // add 17 to the start address to get first address for instruction load
    write 17 to REG_B
    cpu_exec
    var exec_ptr
    copy REG_RES to var:exec_ptr

    label exec_file_loop
        copy var:exec_file_desc to REG_A
        copy var:exec_file_counter to REG_B
        copy PROGRAM_COUNTER to var:sys_return
        jump label:sys_fs_read
        jump_err label:exec_file_close

        // load to RAM
        copy REG_RES to *var:exec_ptr
        copy var:exec_ptr to REG_A
        write OP_INCR to REG_OP
        cpu_exec
        copy REG_RES to var:exec_ptr

        copy var:exec_file_counter to REG_A
        write OP_INCR to REG_OP
        cpu_exec
        copy REG_RES to var:exec_file_counter

        copy REG_PROC_END_ADDRESS to REG_A
        copy var:exec_ptr to REG_B
        write OP_CMP_LT to REG_OP
        cpu_exec
        jump_if label:exec_file_close

        jump label:exec_file_loop

    label exec_file_close
        // Let's close file
        copy var:exec_file_desc to REG_A
        copy PROGRAM_COUNTER to var:sys_return
        jump label:sys_fs_close

        // let's exec the file
        write "" to REG_RES
        write "" to REG_ERROR
        write 16 to REG_SYS_RET_ADDRESS
        write OP_SYS_RETURN to REG_OP
        cpu_exec

        jump label:kernel_start

        label exec_file_error
            copy REG_ERROR to DISPLAY_BUFFER
            write COLOR_RED to DISPLAY_COLOR
            write OP_DISPLAY_LN to REG_OP
            cpu_exec
            jump label:kernel_start


label kernel_end
    copy REG_ERROR to DISPLAY_BUFFER
    write COLOR_RED to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec

    // Print bye message and exit:
    write "Good bye!" to DISPLAY_BUFFER
    write COLOR_GREEN to DISPLAY_COLOR
    write OP_DISPLAY_LN to REG_OP
    cpu_exec

    write OP_HALT to REG_OP
    cpu_exec
// ##########################################
// # KERNEL_END                             #
// ##########################################
