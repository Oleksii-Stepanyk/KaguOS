2048
START_PARTITION_TABLE
PARTITION_ENTRIES 4
NAME part1 START_BLOCK 10 END_BLOCK 1000
NAME part2 START_BLOCK 1001 END_BLOCK 1500
NAME part3 START_BLOCK 1501 END_BLOCK 1800
NAME part4 START_BLOCK 1801 END_BLOCK 2048
END_PARTITION_TABLE

FS_HEADER kagu_fs FIRST_USABLE_BLOCK 31 LAST_USABLE_BLOCK 1000
config.txt 4 4 0 user user BLOCKS 31 40
cat 7 7 7 user user BLOCKS 41 100
1.txt 4 4 4 user user BLOCKS 101 110
mario 7 7 7 user user BLOCKS 111 261
clear 7 7 7 user user BLOCKS 262 275
debug 7 7 7 user user BLOCKS 276 320
chown 7 7 7 user user BLOCKS 321 428
chmod 7 7 7 user user BLOCKS 429 676











FS_HEADER_END
proc_memory 500









1 4 70         #  copy REG_A => var:input_file
1 58 6         #  write "" => REG_B
1 59 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 54           #  jump_if lbl:exit_error
1 70 4         #  copy var:input_file => REG_A
1 60 10        #  write SYS_CALL_OPEN => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 54           #  jump_err lbl:exit_error
1 12 71        #  copy REG_RES => var:fd
1 62 72        #  write "1" => var:counter
1 71 4         #  copy var:fd => REG_A
1 72 6         #  copy var:counter => REG_B
1 63 10        #  write SYS_CALL_READ => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 45           #  jump_err lbl:close
1 12 4         #  copy REG_RES => REG_A
1 64 6         #  write COLOR_NO => REG_B
1 65 10        #  write SYS_CALL_PRINTLN => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 72 4         #  copy var:counter => REG_A
1 66 2         #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 72        #  copy REG_RES => var:counter
3 29           #  jump lbl:loop
1 71 4         #  copy var:fd => REG_A
1 67 10        #  write SYS_CALL_CLOSE => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 54           #  jump_err lbl:exit_error
1 68 4         #  write "0" => REG_A
1 69 10        #  write SYS_CALL_EXIT => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 62 4         #  write "1" => REG_A
1 69 10        #  write SYS_CALL_EXIT => REG_D
1 61 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec

8
4
25
1
7
0
1
2
6
0
0







Some line 1
Line 2
Another line
Just for test
Ok
That's it
Text
Other Text
One more Text
The end
1 4 166        #  copy REG_A => var:iterations
1 126 4        #  write COLOR_CYAN => REG_A
1 127 10       #  write SYS_CALL_SET_BACKGROUND => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 129 170      #  write "cccccccccccccccccccccccccccc" => 170
1 129 171      #  write "cccccccccccccccccccccccccccc" => 171
1 129 172      #  write "cccccccccccccccccccccccccccc" => 172
1 129 173      #  write "cccccccccccccccccccccccccccc" => 173
1 130 174      #  write "cccccccccccrrrrrcccccccccccc" => 174
1 131 175      #  write "ccccccccccrrrrrrrrrccccccccc" => 175
1 132 176      #  write "ccccccccccbbbyybyccccccccccc" => 176
1 133 177      #  write "cccccccccbybyyybyyyccccccccc" => 177
1 134 178      #  write "cccccccccbybbyyybyyycccccccc" => 178
1 135 179      #  write "cccccccccbbyyyybbbbccccccccc" => 179
1 136 180      #  write "cccccccccccyyyyyyycccccccccc" => 180
1 137 181      #  write "ccccccccccbbrbbbcccccccccccc" => 181
1 138 182      #  write "cccccccccbbbrbbrbbbccccccccc" => 182
1 139 183      #  write "ccccccccbbbbrrrrbbbbcccccccc" => 183
1 140 184      #  write "ccccccccyybryrryrbyycccccccc" => 184
1 141 185      #  write "ccccccccyyyrrrrrryyycccccccc" => 185
1 142 186      #  write "ccccccccyyrrrrrrrryycccccccc" => 186
1 143 187      #  write "ccccccccccrrrccrrrcccccccccc" => 187
1 144 188      #  write "cccccccccbbbccccbbbccccccccc" => 188
1 145 189      #  write "ccccccccbbbbccccbbbbcccccccc" => 189
1 146 190      #  write "cwwwwwwwwwwwwwwwwwwwwwwwwwwc" => 190
1 129 191      #  write "cccccccccccccccccccccccccccc" => 191
1 129 192      #  write "cccccccccccccccccccccccccccc" => 192
1 129 193      #  write "cccccccccccccccccccccccccccc" => 193
1 129 194      #  write "cccccccccccccccccccccccccccc" => 194
1 166 4        #  copy var:iterations => REG_A
1 147 2        #  write OP_DECR => REG_OP
0              #  cpu_exec
1 12 166       #  copy REG_RES => var:iterations
1 166 4        #  copy var:iterations => REG_A
1 148 6        #  write "0" => REG_B
1 149 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 118          #  jump_if lbl:exit
1 150 167      #  write "170" => var:counter
1 167 4        #  copy var:counter => REG_A
1 151 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 167       #  copy REG_RES => var:counter
1 167 4        #  copy var:counter => REG_A
1 152 6        #  write "21" => REG_B
1 153 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 167 4        #  copy var:counter => REG_A
1 12 6         #  copy REG_RES => REG_B
1 154 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 155 4        #  write "0.1" => REG_A
1 156 10       #  write SYS_CALL_SLEEP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 167 4        #  copy var:counter => REG_A
1 157 6        #  write "174" => REG_B
1 158 2        #  write OP_CMP_NEQ => REG_OP
0              #  cpu_exec
4 57           #  jump_if lbl:loop_move_up
1 167 4        #  copy var:counter => REG_A
1 147 2        #  write OP_DECR => REG_OP
0              #  cpu_exec
1 12 167       #  copy REG_RES => var:counter
1 167 4        #  copy var:counter => REG_A
1 152 6        #  write "21" => REG_B
1 153 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 167 4        #  copy var:counter => REG_A
1 12 6         #  copy REG_RES => REG_B
1 154 10       #  write SYS_CALL_RENDER_BITMAP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 155 4        #  write "0.1" => REG_A
1 156 10       #  write SYS_CALL_SLEEP => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 150 4        #  write "170" => REG_A
1 167 6        #  copy var:counter => REG_B
1 159 2        #  write OP_CMP_LT => REG_OP
0              #  cpu_exec
4 79           #  jump_if lbl:loop_move_down
1 150 167      #  write "170" => var:counter
1 160 4        #  write "c" => REG_A
1 *167 6       #  copy *var:counter => REG_B
1 161 8        #  write "" => REG_C
1 162 2        #  write OP_CONCAT_WITH => REG_OP
0              #  cpu_exec
1 12 *167      #  copy REG_RES => *var:counter
1 167 4        #  copy var:counter => REG_A
1 151 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 167       #  copy REG_RES => var:counter
1 167 4        #  copy var:counter => REG_A
1 163 6        #  write "191" => REG_B
1 159 2        #  write OP_CMP_LT => REG_OP
0              #  cpu_exec
4 102          #  jump_if lbl:shift_right
3 47           #  jump lbl:start
1 164 4        #  write COLOR_NO => REG_A
1 127 10       #  write SYS_CALL_SET_BACKGROUND => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 148 4        #  write "0" => REG_A
1 165 10       #  write SYS_CALL_EXIT => REG_D
1 128 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
7
9
25
cccccccccccccccccccccccccccc
cccccccccccrrrrrcccccccccccc
ccccccccccrrrrrrrrrccccccccc
ccccccccccbbbyybyccccccccccc
cccccccccbybyyybyyyccccccccc
cccccccccbybbyyybyyycccccccc
cccccccccbbyyyybbbbccccccccc
cccccccccccyyyyyyycccccccccc
ccccccccccbbrbbbcccccccccccc
cccccccccbbbrbbrbbbccccccccc
ccccccccbbbbrrrrbbbbcccccccc
ccccccccyybryrryrbyycccccccc
ccccccccyyyrrrrrryyycccccccc
ccccccccyyrrrrrrrryycccccccc
ccccccccccrrrccrrrcccccccccc
cccccccccbbbccccbbbccccccccc
ccccccccbbbbccccbbbbcccccccc
cwwwwwwwwwwwwwwwwwwwwwwwwwwc
3
0
8
170
2
21
0
10
0.1
11
174
9
10
c

17
191
0
0


1 25 4         #  write COLOR_NO => REG_A
1 26 10        #  write SYS_CALL_SET_BACKGROUND => REG_D
1 27 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 28 4         #  write "0" => REG_A
1 29 10        #  write SYS_CALL_EXIT => REG_D
1 27 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
0
9
25
0
0

1 4 55         #  copy REG_A => var:arg
1 55 4         #  copy var:arg => REG_A
1 45 6         #  write "on" => REG_B
1 46 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 37           #  jump_if lbl:debug_command_on
1 55 4         #  copy var:arg => REG_A
1 47 6         #  write "off" => REG_B
1 46 2         #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 39           #  jump_if lbl:debug_command_off
1 48 4         #  write "Unknown argument. Expected: debug on/debug off" => REG_A
1 49 6         #  write COLOR_RED => REG_B
1 50 10        #  write SYS_CALL_PRINTLN => REG_D
1 51 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 52 4         #  write "1" => REG_A
1 53 10        #  write SYS_CALL_EXIT => REG_D
1 51 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
DEBUG_ON       #  DEBUG_ON
3 41           #  jump lbl:exit
DEBUG_OFF      #  DEBUG_OFF
3 41           #  jump lbl:exit
1 54 4         #  write "0" => REG_A
1 53 10        #  write SYS_CALL_EXIT => REG_D
1 51 2         #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
on
8
off
Unknown argument. Expected: debug on/debug off
3
1
25
1
0
0







1 4 120        #  copy REG_A => var:newOwner
1 6 122        #  copy REG_B => var:file_path
1 120 4        #  copy var:newOwner => REG_A
1 100 6        #  write "" => REG_B
1 101 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 91           #  jump_if lbl:chown_error
1 122 4        #  copy var:file_path => REG_A
1 100 6        #  write "" => REG_B
1 101 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 91           #  jump_if lbl:chown_error
1 122 4        #  copy var:file_path => REG_A
1 102 10       #  write SYS_CALL_OPEN => REG_D
1 103 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 91           #  jump_err lbl:chown_error
1 12 124       #  copy REG_RES => var:fd
1 120 4        #  copy var:newOwner => REG_A
1 104 6        #  write "2" => REG_B
1 105 8        #  write ":" => REG_C
1 106 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 121       #  copy REG_RES => var:newGroup
1 121 4        #  copy var:newGroup => REG_A
1 100 6        #  write "" => REG_B
1 101 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 91           #  jump_if lbl:chown_error
1 120 4        #  copy var:newOwner => REG_A
1 107 6        #  write "1" => REG_B
1 105 8        #  write ":" => REG_C
1 106 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 120       #  copy REG_RES => var:newOwner
1 120 4        #  copy var:newOwner => REG_A
1 100 6        #  write "" => REG_B
1 101 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 91           #  jump_if lbl:chown_error
1 124 4        #  copy var:fd => REG_A
1 108 10       #  write SYS_CALL_GET_FILE_ATTR => REG_D
1 103 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 91           #  jump_err lbl:chown_error
1 12 123       #  copy REG_RES => var:file_attr
1 123 4        #  copy var:file_attr => REG_A
1 109 6        #  write "4" => REG_B
1 110 8        #  write " " => REG_C
1 120 10       #  copy var:newOwner => REG_D
1 111 2        #  write OP_REPLACE_COLUMN => REG_OP
0              #  cpu_exec
1 12 123       #  copy REG_RES => var:file_attr
1 123 4        #  copy var:file_attr => REG_A
1 112 6        #  write "5" => REG_B
1 110 8        #  write " " => REG_C
1 121 10       #  copy var:newGroup => REG_D
1 111 2        #  write OP_REPLACE_COLUMN => REG_OP
0              #  cpu_exec
1 12 123       #  copy REG_RES => var:file_attr
1 124 4        #  copy var:fd => REG_A
1 123 6        #  copy var:file_attr => REG_B
1 113 10       #  write SYS_CALL_SET_FILE_ATTR => REG_D
1 103 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 91           #  jump_err lbl:chown_error
1 124 4        #  copy var:fd => REG_A
1 114 10       #  write SYS_CALL_CLOSE => REG_D
1 103 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 115 4        #  write "0" => REG_A
1 116 10       #  write SYS_CALL_EXIT => REG_D
1 103 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 117 4        #  write "Some error occured" => REG_A
1 118 6        #  write COLOR_RED => REG_B
1 119 10       #  write SYS_CALL_PRINTLN => REG_D
1 103 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 107 4        #  write "1" => REG_A
1 116 10       #  write SYS_CALL_EXIT => REG_D
1 103 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec

8
4
25
2
:
15
1
12
4
 
16
5
13
6
0
0
Some error occured
3
1





3 44           #  jump lbl:main
4 187          #  jump_if lbl:check_if_all
1 256 4        #  copy var:permission => REG_A
1 260 6        #  copy var:permissionNum => REG_B
1 216 2        #  write OP_ADD => REG_OP
0              #  cpu_exec
1 263 4        #  copy var:file_attr => REG_A
1 261 6        #  copy var:permissionIndex => REG_B
1 217 8        #  write " " => REG_C
1 12 10        #  copy REG_RES => REG_D
1 218 2        #  write OP_REPLACE_COLUMN => REG_OP
0              #  cpu_exec
1 12 263       #  copy REG_RES => var:file_attr
3 187          #  jump lbl:check_if_all
5 187          #  jump_if_not lbl:check_if_all
1 256 4        #  copy var:permission => REG_A
1 260 6        #  copy var:permissionNum => REG_B
1 219 2        #  write OP_SUB => REG_OP
0              #  cpu_exec
1 263 4        #  copy var:file_attr => REG_A
1 261 6        #  copy var:permissionIndex => REG_B
1 217 8        #  write " " => REG_C
1 12 10        #  copy REG_RES => REG_D
1 218 2        #  write OP_REPLACE_COLUMN => REG_OP
0              #  cpu_exec
1 12 263       #  copy REG_RES => var:file_attr
3 187          #  jump lbl:check_if_all
1 4 253        #  copy REG_A => var:newPermission
1 6 262        #  copy REG_B => var:file_path
1 220 252      #  write "0" => var:forAll
1 253 4        #  copy var:newPermission => REG_A
1 221 6        #  write "" => REG_B
1 222 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 207          #  jump_if lbl:chmod_error
1 262 4        #  copy var:file_path => REG_A
1 221 6        #  write "" => REG_B
1 222 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 207          #  jump_if lbl:chmod_error
1 262 4        #  copy var:file_path => REG_A
1 223 10       #  write SYS_CALL_OPEN => REG_D
1 224 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 207          #  jump_err lbl:chmod_error
1 12 264       #  copy REG_RES => var:fd
1 264 4        #  copy var:fd => REG_A
1 225 10       #  write SYS_CALL_GET_FILE_ATTR => REG_D
1 224 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 207          #  jump_err lbl:chmod_error
1 12 263       #  copy REG_RES => var:file_attr
1 253 4        #  copy var:newPermission => REG_A
1 226 2        #  write OP_GET_LENGTH => REG_OP
0              #  cpu_exec
1 12 4         #  copy REG_RES => REG_A
1 227 6        #  write "3" => REG_B
1 222 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 80           #  jump_if lbl:validate_target
1 228 252      #  write "1" => var:forAll
1 228 261      #  write "1" => var:permissionIndex
3 112          #  jump lbl:validate_permission
1 253 4        #  copy var:newPermission => REG_A
1 228 6        #  write "1" => REG_B
1 221 8        #  write "" => REG_C
1 229 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 254       #  copy REG_RES => var:target
1 253 4        #  copy var:newPermission => REG_A
1 228 6        #  write "1" => REG_B
1 221 8        #  write "" => REG_C
1 221 10       #  write "" => REG_D
1 218 2        #  write OP_REPLACE_COLUMN => REG_OP
0              #  cpu_exec
1 12 253       #  copy REG_RES => var:newPermission
1 228 261      #  write "1" => var:permissionIndex
1 254 4        #  copy var:target => REG_A
1 230 6        #  write "u" => REG_B
1 222 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 112          #  jump_if lbl:validate_permission
1 231 261      #  write "2" => var:permissionIndex
1 254 4        #  copy var:target => REG_A
1 232 6        #  write "g" => REG_B
1 222 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 112          #  jump_if lbl:validate_permission
1 227 261      #  write "3" => var:permissionIndex
1 254 4        #  copy var:target => REG_A
1 233 6        #  write "o" => REG_B
1 222 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 112          #  jump_if lbl:validate_permission
3 207          #  jump lbl:chmod_error
1 253 4        #  copy var:newPermission => REG_A
1 231 6        #  write "2" => REG_B
1 221 8        #  write "" => REG_C
1 229 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 256       #  copy REG_RES => var:permission
1 231 258      #  write "2" => var:moduloNum
1 220 259      #  write "0" => var:compareNum
1 228 260      #  write "1" => var:permissionNum
1 256 4        #  copy var:permission => REG_A
1 234 6        #  write "x" => REG_B
1 222 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 143          #  jump_if lbl:validate_operation
1 235 258      #  write "4" => var:moduloNum
1 228 259      #  write "1" => var:compareNum
1 231 260      #  write "2" => var:permissionNum
1 256 4        #  copy var:permission => REG_A
1 236 6        #  write "w" => REG_B
1 222 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 143          #  jump_if lbl:validate_operation
1 237 258      #  write "8" => var:moduloNum
1 227 259      #  write "3" => var:compareNum
1 235 260      #  write "4" => var:permissionNum
1 256 4        #  copy var:permission => REG_A
1 238 6        #  write "r" => REG_B
1 222 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 143          #  jump_if lbl:validate_operation
3 207          #  jump lbl:chmod_error
1 253 4        #  copy var:newPermission => REG_A
1 228 6        #  write "1" => REG_B
1 221 8        #  write "" => REG_C
1 229 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 255       #  copy REG_RES => var:operation
1 239 257      #  write lbl:add_permission => var:operationLabel
1 255 4        #  copy var:operation => REG_A
1 240 6        #  write "+" => REG_B
1 222 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 172          #  jump_if lbl:set_permissions
1 241 257      #  write lbl:sub_permission => var:operationLabel
1 255 4        #  copy var:operation => REG_A
1 242 6        #  write "-" => REG_B
1 222 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 172          #  jump_if lbl:set_permissions
3 207          #  jump lbl:chmod_error
1 261 4        #  copy var:permissionIndex => REG_A
1 243 2        #  write OP_INCR => REG_OP
0              #  cpu_exec
1 12 261       #  copy REG_RES => var:permissionIndex
1 261 4        #  copy var:permissionIndex => REG_A
1 235 6        #  write "4" => REG_B
1 222 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 192          #  jump_if lbl:update_permissions
3 172          #  jump lbl:set_permissions
1 263 4        #  copy var:file_attr => REG_A
1 261 6        #  copy var:permissionIndex => REG_B
1 217 8        #  write " " => REG_C
1 229 2        #  write OP_GET_COLUMN => REG_OP
0              #  cpu_exec
1 12 256       #  copy REG_RES => var:permission
1 256 4        #  copy var:permission => REG_A
1 258 6        #  copy var:moduloNum => REG_B
1 244 2        #  write OP_MOD => REG_OP
0              #  cpu_exec
1 259 4        #  copy var:compareNum => REG_A
1 12 6         #  copy REG_RES => REG_B
1 245 2        #  write OP_CMP_LT => REG_OP
0              #  cpu_exec
3 *257         #  jump *var:operationLabel
1 252 4        #  copy var:forAll => REG_A
1 228 6        #  write "1" => REG_B
1 222 2        #  write OP_CMP_EQ => REG_OP
0              #  cpu_exec
4 162          #  jump_if lbl:set_all_permissions
1 264 4        #  copy var:fd => REG_A
1 263 6        #  copy var:file_attr => REG_B
1 246 10       #  write SYS_CALL_SET_FILE_ATTR => REG_D
1 224 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 207          #  jump_err lbl:chmod_error
1 264 4        #  copy var:fd => REG_A
1 247 10       #  write SYS_CALL_CLOSE => REG_D
1 224 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 207          #  jump_err lbl:chmod_error
1 220 4        #  write "0" => REG_A
1 248 10       #  write SYS_CALL_EXIT => REG_D
1 224 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 249 4        #  write "Some error occured" => REG_A
1 250 6        #  write COLOR_RED => REG_B
1 251 10       #  write SYS_CALL_PRINTLN => REG_D
1 224 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 228 4        #  write "1" => REG_A
1 248 10       #  write SYS_CALL_EXIT => REG_D
1 224 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
0
 
16
1
0

8
4
25
12
13
3
1
15
u
2
g
o
x
4
w
8
r
18
+
31
-
2
5
10
13
6
0
Some error occured
3
1













1 263 6        #  copy var:file_attr => REG_B
1 246 10       #  write SYS_CALL_SET_FILE_ATTR => REG_D
1 224 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 207          #  jump_err lbl:chmod_error
1 264 4        #  copy var:fd => REG_A
1 247 10       #  write SYS_CALL_CLOSE => REG_D
1 224 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
6 207          #  jump_err lbl:chmod_error
1 220 4        #  write "0" => REG_A
1 248 10       #  write SYS_CALL_EXIT => REG_D
1 224 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 249 4        #  write "Some error occured" => REG_A
1 250 6        #  write COLOR_RED => REG_B
1 251 10       #  write SYS_CALL_PRINTLN => REG_D
1 224 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
1 228 4        #  write "1" => REG_A
1 248 10       #  write SYS_CALL_EXIT => REG_D
1 224 2        #  write OP_SYS_CALL => REG_OP
0              #  cpu_exec
0
 
16
1
0

8
4
25
12
13
3
1
15
u
2
g
o
r
4
w
8
x
18
+
31
-
2
5
10
13
6
0
Some error occured
3
1









































































































































































































































































FS_HEADER kagu_fs FIRST_USABLE_BLOCK 1021 LAST_USABLE_BLOCK 1500



















FS_HEADER_END
































































































































































































































































































































































































































































































FS_HEADER kagu_fs FIRST_USABLE_BLOCK 1522 LAST_USABLE_BLOCK 1800



















FS_HEADER_END























































































































































































































































































FS_HEADER kagu_fs FIRST_USABLE_BLOCK 1822 LAST_USABLE_BLOCK 2048



















FS_HEADER_END











































































































































































































































































